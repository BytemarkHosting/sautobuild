#!/usr/bin/ruby
#
# NAME
#  sautobuild -- automatically build a multi-arch Debian repository using sbuild
#
# SYNOPSIS
#  sautobuild [ --help | -h ] [ --manual | -m ] [ --distribution | -d <dist> ]
#     [ --chroot | -c <chroot> ] [ --strict | -s ] [ --update | -u ]
#     [ --origin | -O <origin> ] [ --label | -L <label> ] [ -n | --no-repo ]
#     [ -k | --check ] [ --components | -C <components> ]
#     [ --sources-list | -S  <filename> ] [ --apt-config | -A <filename>]
#     [ --apt-key | -K <filename> ] [ -G | --use-gbp ]
#     [ -- <flags> ] <source directory>
#
# OPTIONS
#
# --help, -h             Show a short help message
#
# --manual, -m           Show this manual
#
# --architecture, -a <arch>    Specify the architecture to build from, rather
#                              than reading it from debian/control. It can be a
#                              platform name, like "amd64" or "i386", or one of
#                              "any" or "all".
#
# --distribution, -d <distro>  Specify the distribution rather than reading it
#                              from debian/changelog
#
# --check, -k            Check packages using Lintian.
#
# --strict, -s           Enable strict Lintian checking of produced packages.
#                        Causes the build process to exit with the Lintian exit
#                        code if the Lintian check fails.
#
# --update, -u           Passes sbuild(1) the --apt-update flag, causing an
#                        apt-get update to be run in the chroot before the
#                        build starts.
#
# --chroot, -c <chroot>  Specify which chroot you wish the package to be built
#                        in. This overrides the assumed defaults in sbuild.
#
# --origin, -O <origin>  Sets the Origin: field in the Release file of
#                        the final repository. Defaults to the build machine's
#                        hostname.
#
# --label, -L <label>    Sets the Label: field in the Release file.  Defaults
#                        to "Unknown".
#
# --components, -C <components>  Sets the Components: field in the Release
#                                file. Defaults to "main".
#
# --sources-list, -S <filename>  Additional apt sources list to copy into the
#                                build chroot. Runs apt-get update having
#                                copied the file in place. See EXTRA APT CONFIG below.
#
# --apt-config, -A <filename>  Additional apt configuration to copy into the
#                              build chroot. Runs apt-get update having copied
#                              the file in place. See EXTRA APT CONFIG below.
#
# --apt-key, -K <filename>     Add a local GPG key for apt-get. See ADDITIONAL
#                              SOURCES below.
#
# --use-gbp, -G                Use git-buildpackage.
#                             
# USAGE
#
# This program can be used to create a Debian repository from a Debian source
# directory. Given an appropriately created set of schroot(1) environments,
# sautobuild will build the package for all appropriate architectures,
# including source tarballs.
#
# If "label", "origin", or "components" are specified, it will then generate
# the required Packages, Sources, and Release files in order to create a Debian
# repository.
#
# ASSUMPTIONS
#
# It is assumed that the distribution can be calculated from the latest entry
# of the "debian/changelog".
#
# It is assumed that the schroots are named in a convention of
# <distribution>-<architecture>, for example "stable-amd64", or "natty-i386".
# Also, for architecture-independent packages, there is a schroot just named
# after the distribution, e.g. "stable", or "natty". Use the "aliases"
# directive in your schroot configuration to do this.
#
# SETTING UP SCHROOTS
#
# It is recommended to use mk-sbuild(1) to set up a collection of chroots to
# build in. This script forms part of the Ubuntu package "ubuntu-dev-tools",
# available in lucid (10.10) onwards.
#
# USING THE PACKAGES
#
# It is possible to use the packages straight from your new repository. Simply
# add
#
#   deb <path to your repo> ./
#
# to your apt sources list.
#
# It is also possible to prevent automatic upgrades to packages from this
# repository thanks to "pinning". By default the "origin" of the packages is
# set to the hostname where the builds happen, so it is possible to pin using
# this information. For example, assuming the build host is called
# "build.host", then adding the following will allow installation of packages
# from your new machine, while preventing further automatic upgrades.
#
#  Package: *
#  Pin: release o=build.host
#  Pin-Priority: 50
#
# See apt_preferences(5) for more information.
#
# EXTRA APT CONFIG
#
# If the build process requires additional sources, keys or bits of
# configuration for apt that are not in the chroot itself, it is possible to
# add these on the command line. However, due to the very limited nature of
# schroot and sbuild, the chroot must have sudo installed, and the user
# executing the build must have NOPASSWD access to all commands. Usually this
# involves just adding
#
#   %sbuild ALL=(ALL:ALL) NOPASSWD:ALL
#
# to /etc/sudoers in the pristine chroot.
#
# USING GIT-BUILDPACKAGE
#
# If you pass the -G flag, git-buildpackage will be used, passing sautobuild
# (and all its options) as the --git-builder flag.  If the topmost commit is
# not tagged then a "snapshot" build will be created.
#
# PASSING FLAGS TO SBUILD OR GIT-BUILDPACKAGE
#
# It is possible to pass flags through to the underlying build mechnism, just
# put them on after the null option '--'.  Note that the build directory always
# has to be last.
#
# If using git-buildpackage, the flags do not get as far as sbuild.
#
# BUGS
#
# Extra flags for lintian cannot be passed.
#
# Only flags for git-buildpackage OR sbuild can be passed through.
#
# Release and changes files cannot be signed automatically.
#
# SEE ALSO
#
# sbuild(1), schroot(1), lintian(1), mk-sbuild(1), apt_preferences(5),
# gbp-buildpackage(1)
#
# AUTHOR
#
# Patrick J Cherry <patrick@bytemark.co.uk>
#

require 'sautobuild'
require 'socket'

def error(msg)
  STDERR.print "*** Error: #{msg}\n"
  STDERR.print "*** For help, type: {$PROGRAM_NAME} -h\n"
  exit 1
end

check = no_repo = help = manual = verbose = false
version = strict = update_chroot = false

components = 'main'
#
# Origin defaults to the hostname.
#
origin = Socket.gethostname
label = 'Unknown'
label = "Unknown"
chroot = nil
architecture = nil
distribution = nil
sources_list = nil
apt_conf = nil
apt_key  = nil
sbuild_flags = nil
use_gbp = nil
sautobuild_opts = []
chroot = nil
architecture = nil
builder_flags = nil

GetoptLong.new(
  ['-h', '--help', GetoptLong::NO_ARGUMENT],
  ['-m', '--manual', GetoptLong::NO_ARGUMENT],
  ['-s', '--strict', GetoptLong::NO_ARGUMENT],
  ['-c', '--chroot', GetoptLong::REQUIRED_ARGUMENT],
  ['-k', '--check', GetoptLong::NO_ARGUMENT],
  ['-u', '--update', GetoptLong::NO_ARGUMENT],
  ['-n', '--no-repo', GetoptLong::NO_ARGUMENT],
  ['-d', '--distribution', GetoptLong::REQUIRED_ARGUMENT],
  ['-O', '--origin', GetoptLong::REQUIRED_ARGUMENT],
  ['-L', '--label', GetoptLong::REQUIRED_ARGUMENT],
  ['-C', '--components', GetoptLong::REQUIRED_ARGUMENT],
  ['-S', '--sources-list', GetoptLong::REQUIRED_ARGUMENT],
  ['-A', '--apt-config', GetoptLong::REQUIRED_ARGUMENT],
  ['-K', '--apt-key', GetoptLong::REQUIRED_ARGUMENT],
  ['-B', '--sbuild-flags', GetoptLong::REQUIRED_ARGUMENT],
  ['-G', '--use-gbp', GetoptLong::NO_ARGUMENT]
).each do |opt, arg|
  sautobuild_opts << opt
  sautobuild_opts << arg unless arg.empty?

  case opt
  when '-h'
    help = true
  when '-m'
    manual = true
  when '-v'
    verbose = true
  when '-s'
    strict = true
  when '-c'
    chroot = true
  when '-k'
    check = true
  when '-a'
    architecture = arg
  when '-d'
    distribution = arg
  when '-u'
    update_chroot = true
  when '-n'
    no_repo = true
  when '-O'
    origin = arg
  when '-L'
    label = arg
  when '-C'
    components = arg
  when '-S'
    sources_list = arg
  when '-A'
    apt_conf = arg
  when '-K'
    apt_key = arg
  when '-B'
    sbuild_flags = arg
  when '-G'
    use_gbp = true
  end
end

source_dir    = ARGV.pop
builder_flags = ARGV unless ARGV.empty?

# CAUTION! Kwality kode.
#
if manual || help
  # Open the file, stripping the shebang line
  lines = File.open(__FILE__, &:readlines)[1..-1]

  found_synopsis = false

  lines.each do |line|
    line.chomp!
    break if line.empty?

    if help && !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help && found_synopsis && line =~ /^#\s*$/
  end
end

exit 0 if help || version || manual

begin
  pkg = Sautobuild.new(source_dir)
  pkg.update_chroot = update_chroot
  pkg.architecture = architecture if architecture
  pkg.distribution = distribution if distribution
  pkg.sources_list = sources_list if sources_list
  pkg.apt_conf = apt_conf if apt_conf
  pkg.chroot = chroot if chroot
  pkg.architecture = architecture if architecture
  pkg.builder_flags = builder_flags if builder_flags
  pkg.use_gbp = use_gbp if use_gbp
  pkg.sautobuild_opts = sautobuild_opts
  pkg.build
  pkg.check(strict) if check || strict

  unless no_repo
    pkg.make_repo(label: label, origin: origin, components: components)
  end
rescue StandardError => ex
  puts ex.backtrace.join("\n") if $DEBUG
  error(ex.to_s)
  exit 1
end

exit 0
