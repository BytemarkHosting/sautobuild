#!/bin/bash

#
# Bail out of there is an error of some sort.
#
set -e

show_help() {

  echo <<EOF
${0}: Automatically run tests using a VM based on an lvm-snapshot schroot.

  -v, --verbose
  -h, --help
  -s, --setup-d <directory>
  -c, --chroot <chroot>

EOF
  exit 0
}

do_tidy_up() {
  #
  # Reset trap
  #
  trap - ERR
  trap - EXIT

  if [ -f "$SLOGFILE" ] ; then
    echo "Saving log file as sautotest.log.$$"
    cp $VERBOSE $SLOGFILE $PWD/sautotest.log.$$ 
  fi

  if [ -n "$CHROOT" ] ; then
    /usr/bin/schroot $VERBOSE --force --end-session --chroot $CHROOT  
  fi

  if [ -n "$STEMPDIR" -a -d "$STEMPDIR" ] ; then
    rm -rf $VERBOSE $STEMPDIR
  fi
}

# Note that we use `"$@"' to let each command-line parameter expand to a 
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o vhs:c: --long help,verbose,setup-d:,chroot -n "$0" -- "$@")

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
  case "$1" in
    -h|--help) show_help ;;
    -v|--verbose) VERBOSE="--verbose" ; shift ;;
    -s|--setup-d) SCHROOT_SETUP_D=$2 ; shift ; shift ;;
    -c|--chroot) SCHROOT=$2 ; shift ; shift ;;
    --) shift ; break ;;
    *) echo "Unknown option $1" ; exit 1 ;;
  esac
done

if [ -z "$1" ] ; then
  echo "E: Test directory argument is missing"
  exit 1
fi

#
# The test directory is the last arg.
#
SCHROOT_TEST_D="$1"

if [ ! -d "$SCHROOT_TEST_D" ] ; then
  echo "E: Unable to find test directory '$SCHROOT_TEST_D'"
  exit 1
fi

#
# Check our setup directory exists
#
SCHROOT_SETUP_D=${SCHROOT_SETUP_D:-/usr/share/sautobuild/sautotest.setup.d/}

if [ ! -d "$SCHROOT_SETUP_D" ] ; then
  echo "E: Unable to find setup directory '$SCHROOT_SETUP_D'"
  exit 1
fi


#
# If no chroot is specified, use the default.
#
SCHROOT=${SCHROOT:-default}

chroot_info=$(/usr/bin/schroot --info --chroot $SCHROOT)
chroot_type=$(echo "$chroot_info"     | grep "^ \+Type"        | awk '{print $2}')
personality=$(echo "$chroot_info"     | grep "^ \+Personality" | awk '{print $2}')

#
# Check to make sure the chroot exists, and is an LVM snapshot type.
#
if [ "$chroot_type" != "lvm-snapshot" ] ; then
  echo "E: The $SCHROOT chroot is not an lvm-snapshot type"
  exit 1
fi

#
# Choose our version of qemu, and make sure it exists.
#
if [ "$personality" = "linux32" -o "$personality" = "linux"  ] ; then
  QEMU=/usr/bin/qemu-system-x86_64
else
  echo "E: Unrecognised personality '$personality'"
  exit 1
fi

if [ ! -x "$QEMU" ] ; then
  echo "E: $QEMU is not found or not executable."
  exit 1
fi

PREFIX=${PREFIX:-/usr}

################### Tidy up needed after this point ################################

#
# Set traps.
#
trap do_tidy_up ERR
trap do_tidy_up EXIT

#
# Our temporary directory.  This is where we'll keep the kernel + initrd.
#
STEMPDIR=$(mktemp -d)
SLOGFILE=$STEMPDIR/log

#
# Create our chroot
#
CHROOT=$(/usr/bin/schroot --begin --chroot ${SCHROOT})

#
# Make sure our chroot is set up
#
if [ -z "$CHROOT" ] ; then
  echo "E: schroot failed to create chroot."
  exit 1
fi

#
# This is where we're expecting schroot to set things up.  Make sure it is
# there
#
SCHROOT_MOUNT=/var/lib/schroot/mount/$CHROOT
if [ ! -d $SCHROOT_MOUNT ] ; then
  echo "E: schroot mountpount missing"
  exit 1
fi

mkdir $VERBOSE -p $STEMPDIR

#
# Copy our tests to $TMPDIR too.
#
mkdir -p $VERBOSE $STEMPDIR/sautotest.test.d
mkdir -p $VERBOSE $STEMPDIR/sautotest.setup.d
cp --recursive $VERBOSE $SCHROOT_TEST_D/* $STEMPDIR/sautotest.test.d
cp --recursive $VERBOSE $SCHROOT_SETUP_D/* $STEMPDIR/sautotest.setup.d
chmod $VERBOSE +x $STEMPDIR/sautotest.test.d/*
chmod $VERBOSE +x $STEMPDIR/sautotest.setup.d/*

#
# Setup our schroot
#
echo "I: Setting up the chroot"
/usr/bin/schroot $VERBOSE --chroot=$CHROOT --run-session --user=root -- run-parts $VERBOSE --exit-on-error --arg=$STEMPDIR/sautotest.test.d $STEMPDIR/sautotest.setup.d
echo "I: Finished setting up the chroot"

# 
# Our qemu command line is going to try to use the kernel in the chroot.
# Failing that, maybe the host kernel will do the trick.
#
if [ -e $SCHROOT_MOUNT/vmlinuz -a -e $SCHROOT_MOUNT/initrd.img ] ; then
  echo "I: using chroot machine kernel + initrd"
  cp $VERBOSE $SCHROOT_MOUNT/vmlinuz $STEMPDIR
  cp $VERBOSE $SCHROOT_MOUNT/initrd.img $STEMPDIR
elif [ -e /vmlinuz -a -e /initrd.img ] ; then
  echo "I: using host machine kernel + initrd"
  cp $VERBOSE /vmlinuz $STEMPDIR
  cp $VERBOSE /initrd.img $STEMPDIR
else
  echo "E: Could not find a suitable kernel and/or initrd to use."
  exit 1
fi

#
# Unmount our schroot.
#
echo "I: Unmounting the chroot"
sudo ${PREFIX}/bin/sautotest_umount_schroot $SCHROOT_MOUNT

#
# Work out where our snapshot actually is, and if we're using 32/64bit.
#
chroot_info=$(/usr/bin/schroot --info --chroot $CHROOT)
snapshot_device=$(echo "$chroot_info" | grep "^ \+LVM Snapshot Device" | awk '{print $4}')

#
# Start our VM..
#
echo "I: Starting the VM"
sudo $QEMU -m 2048 \
  -drive file=$snapshot_device,if=virtio,index=0 \
  -net nic,model=virtio -net tap \
  -pidfile $STEMPDIR/pid -monitor unix:$STEMPDIR/monitor,server,nowait \
  -kernel $STEMPDIR/vmlinuz -initrd $STEMPDIR/initrd.img \
  -boot c -nographic -enable-kvm \
  -append "edd=off console=tty0 console=ttyS0,11520n8 root=/dev/vda"  | tee $SLOGFILE 

if [ ! -f $SLOGFILE ] ; then
  echo "E: Test log could not be found."
  exit 1
fi

if ! grep -q 'sautotest_runner: PASS' $SLOGFILE ; then
  echo "E: Tests failed."
  exit 1
fi

echo "I: Tests passed."

do_tidy_up
