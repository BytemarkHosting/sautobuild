#!/bin/bash

#
# Bail out of there is an error of some sort.
#
set -e

if [ ! -f /etc/debian_chroot ] ; then
  echo "E: This doesn't look like a chroot -- $0 was about to break your system!"
  exit 1
fi

#
# 
#
VERBOSE=""
SCRIPT_DIR="$1"

#
# Set up the fstab
#
cat > /etc/fstab <<EOF
proc         /proc proc     rw,nodiratime,nodev,nosuid,noexec 0 0
/dev/vda     /     ext3     errors=remount-ro,noatime,nodiratime   0     1
EOF

#
# Modules for the initrd.
#
cat >> /etc/modules <<EOF
#
# I can haz all teh virtio
#
virtio
virtio_net
virtio_blk
virtio_pci
virtio_console
virtio-rng
virtio_ring
virtio_balloon
EOF

#
# Set up a stub /etc/hosts
#
cat > /etc/hosts <<EOF
127.0.0.1	localhost.localdomain	localhost

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF


#
# Copy our test scripts into the chroot
#
cat > /sautotest_runner <<EOF
#!/bin/bash

#
# The output status -- default is fail.
#
STATUS="FAIL"
SCRIPT_DIR="/sautotest.d"

do_tidy_up() {
  #
  # Sync (to make sure all the output gets stuffed down the serial line) and
  # halt.
  #
  /bin/sync
  /sbin/halt
}

trap do_tidy_up ERR
trap do_tidy_up EXIT

#
# Wait until nologin has been removed
#
while [ -e /var/lib/initscripts/nologin -o -e /etc/nologin ] ; do
  echo "** Sleeping whilst nologin exists"
  sleep 1
done

#
# If there's a DEBUG flag, then just spawn a root login.
#
if [ -e /\$SCRIPT_DIR/DEBUG ] ; then
  exec /bin/login -f root
fi

echo "** Tests started at \$(date --rfc-2822)"

#
# If run-parts exits successfully, then set our status to pass.
#
/bin/run-parts $VERBOSE --new-session --exit-on-error /\$SCRIPT_DIR && STATUS="PASS"

echo "** Tests finshed at \$(date --rfc-2822)"
echo "** \$STATUS"

EOF


#
# Copy our script directory to the 
#
mkdir $VERBOSE /sautotest.d
cp $VERBOSE --archive $SCRIPT_DIR/* /sautotest.d
chmod $VERBOSE +x /sautotest_runner /sautotest.d/*

if [ -e /etc/inittab ] ; then
  sed -ie 's/^#T0.*$/T0:2:once:\/sautotest_runner/' /etc/inittab
elif [ -d /etc/init ] ; then
  cat > /etc/init/ttyS0.conf <<EOF
#
# Run our tests
# 
start on runlevel [2]
stop on runlevel [!2]

exec /sautotest_runner
EOF
fi

#
# Sort out passwd, shadow + group
#
for i in passwd shadow group gshadow ; do
  if [ -f "/etc/${i}-" ] ; then
    cat "/etc/${i}-" > "/etc/${i}"
  fi
done

rm -f /etc/services /etc/protocols


#
# Update.
#
apt-get update

#
# Install a kernel
#
kernel=$(apt-cache search --names-only "linux-image-(generic|amd64|686)$" | awk '{print $1}' | head -n 1)

if [ "x$kernel" != "x" ] ; then
  apt-get install --yes --force-yes $kernel 
fi

#
# Install some other useful packages.
#
apt-get install --yes --force-yes -o "DPkg::Options::=--force-confnew" netbase ifupdown iproute isc-dhcp-client sed

# Set up a basic network config
#
if [ -d /etc/network ] ; then
  cat > /etc/network/interfaces <<EOF
# The loopback network interface
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
## FIXME
## iface eth0 inet6 magic
EOF
else
  echo "E: Don't know how to set up network on this system."
  exit 1
fi

#
# Set up a random hostname
#
hostname="$(tr -dc a-z0-9  < /dev/urandom| head -c 8)"
if [ -e /etc/debian_chroot ] ; then
  hostname="$hostname.$(< /etc/debian_chroot).test"
else
  hostname="$hostname.test"
fi

#
# Set hostname and mailname.
#
echo $hostname | tee /etc/hostname /etc/mailname > /dev/null

##
# This little script makes sure our hostname is added to /etc/hosts.
##
if [ -d /etc/network/if-up.d ] ; then

  cat > /etc/network/if-up.d/00-add_hostname_to_hosts <<EOF
#!/bin/sh

if [ "\$IFACE" = "eth0" ] ; then
  ip=\$(ip -o -f \${ADDRFAM} addr show dev \${IFACE} scope global primary |  sed -e 's/.*inet6\\? \\([0-9a-f:\\.]\\+\\).*/\\1/')
  hostname=$hostname

  if [ "x\$ip" != "x" ] ; then
    echo "Adding hostname to /etc/hosts:"
    echo "\$ip \$hostname \${hostname%%.*}" | tee -a /etc/hosts
  fi
fi

EOF

  chmod +x /etc/network/if-up.d/00-add_hostname_to_hosts
fi

#
# Make sure no udev rules are in place.
#
rm -f /etc/udev/rules.d/70-persistent-net.rules

#
# This isn't going to be a chroot much longer
#
rm -f /etc/debian_chroot


